#!/usr/bin/env python3
"""
–ó–æ–≤–Ω—ñ—à–Ω—ñ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤ –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
–û–±—Ä–æ–±–ª—è—î CSV —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–µ–∑ timeout –ø—Ä–æ–±–ª–µ–º –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É
"""

import csv
import sys
import os
import psycopg2
from datetime import datetime
import pandas as pd

def get_db_connection():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    database_url = os.environ.get("DATABASE_URL")
    if not database_url:
        print("ERROR: DATABASE_URL not found in environment variables")
        return None
    return psycopg2.connect(database_url)

def clean_text_for_sql(value):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è SQL"""
    if pd.isna(value) or value is None or str(value).lower() == 'nan':
        return None
    
    text = str(value).strip()
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ NULL bytes —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    text = text.replace('\x00', '').replace('\r\n', ' ').replace('\n', ' ').replace('\r', ' ')
    text = text.replace('\t', ' ').replace('\\', '/').replace("'", "''")  # Escape single quotes
    
    # –û–±–º–µ–∂–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É
    if len(text) > 500:
        text = text[:500]
    
    return text if text and text.lower() != 'nan' else None

def process_actualization_file(file_path):
    """–û–±—Ä–æ–±–∏—Ç–∏ CSV —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É"""
    
    if not os.path.exists(file_path):
        print(f"ERROR: –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    print(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó: {file_path}")
    print(f"‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now()}")
    
    success_count = 0
    error_count = 0
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é
    conn = get_db_connection()
    if not conn:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        return False
    
    cursor = conn.cursor()
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –Ñ–îR–ü–û–£ –∑ –±–∞–∑–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        print("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –Ñ–îR–ü–û–£ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        cursor.execute("SELECT edrpou, id FROM companies")
        db_companies = {row[0]: row[1] for row in cursor.fetchall()}
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(db_companies)} –∫–æ–º–ø–∞–Ω—ñ–π –∑ –±–∞–∑–∏")
        
        # –ß–∏—Ç–∞—Ç–∏ CSV —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        print("üìÑ –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Ä—è–¥–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É")
        
        # –ó–Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –Ñ–îR–ü–û–£
        edrpou_col = None
        for col_name in df.columns:
            if any(keyword in col_name.upper() for keyword in ['–Ñ–î–†–ü–û–£', 'EDRPOU']):
                edrpou_col = col_name
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –Ñ–îR–ü–û–£: '{col_name}'")
                break
        
        if not edrpou_col:
            print("ERROR: –ö–æ–ª–æ–Ω–∫–∞ –Ñ–îR–ü–û–£ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª—ñ –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
            return False
        
        # –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
        df[edrpou_col] = df[edrpou_col].astype(str)
        existing_mask = df[edrpou_col].isin(db_companies.keys())
        df_existing = df[existing_mask].copy()
        
        print(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ {len(df_existing)} –∫–æ–º–ø–∞–Ω—ñ–π –¥–ª—è –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(df) - len(df_existing)} –∫–æ–º–ø–∞–Ω—ñ–π (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ)")
        
        if len(df_existing) == 0:
            print("WARNING: –ñ–æ–¥–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
            return False
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –±–∞—Ç—á–µ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ (–±–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å)
        print("üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –±–∞—Ç—á–µ–≤–æ—ó –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
        
        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        print("üìù –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...")
        insert_data = []
        
        for index, row in df_existing.iterrows():
            try:
                edrpou = str(row[edrpou_col])
                company_id = db_companies[edrpou]
                
                # –û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –ø–æ–ª—è
                first_name = clean_text_for_sql(
                    row.get('–Ü–º\'—è') or row.get('–ò–º—è') or row.get('First Name') or 
                    row.get('first_name') or row.get('–Ü–º\'—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                
                middle_name = clean_text_for_sql(
                    row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ') or row.get('–û—Ç—á–µ—Å—Ç–≤–æ') or row.get('Middle Name') or
                    row.get('middle_name') or row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                
                last_name = clean_text_for_sql(
                    row.get('–ü—Ä—ñ–∑–≤–∏—â–µ') or row.get('–§–∞–º–∏–ª–∏—è') or row.get('Last Name') or
                    row.get('last_name') or row.get('–ü—Ä—ñ–∑–≤–∏—â–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                
                work_phone = clean_text_for_sql(
                    row.get('–†–æ–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω') or row.get('–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω') or 
                    row.get('Work Phone') or row.get('work_phone') or row.get('–¢–µ–ª. —Ä–æ–±')
                )
                
                corporate_site = clean_text_for_sql(
                    row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π —Å–∞–π—Ç') or row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç') or
                    row.get('Corporate Site') or row.get('corporate_site') or row.get('–°–∞–π—Ç')
                )
                
                work_email = clean_text_for_sql(
                    row.get('–†–æ–±–æ—á–∏–π e-mail') or row.get('–†–∞–±–æ—á–∏–π e-mail') or
                    row.get('Work Email') or row.get('work_email') or row.get('Email')
                )
                
                company_status = clean_text_for_sql(
                    row.get('–°—Ç–∞–Ω –∫–æ–º–ø–∞–Ω—ñ—ó') or row.get('–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏') or
                    row.get('Company Status') or row.get('company_status') or row.get('–°—Ç–∞—Ç—É—Å')
                )
                
                director = clean_text_for_sql(
                    row.get('–î–∏—Ä–µ–∫—Ç–æ—Ä') or row.get('Director') or row.get('director') or
                    row.get('–ö–µ—Ä—ñ–≤–Ω–∏–∫') or row.get('–ü–Ü–ë –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                
                # –î–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—ñ (–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ: —Ç–∞–∫=1, –Ω—ñ=0)
                government_purchases = None
                government_purchases_raw = row.get('–£—á–∞—Å—Ç—å —É –¥–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—è—Ö (–Ω–∞ 01.04.2020)') or row.get('–£—á–∞—Å—Ç–∏–µ –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö') or row.get('Government Purchases') or row.get('government_purchases') or row.get('–î–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—ñ')
                if government_purchases_raw and not pd.isna(government_purchases_raw):
                    gov_str = str(government_purchases_raw).strip().lower()
                    if gov_str in ['—Ç–∞–∫', '–¥–∞', 'yes', '1', 'true']:
                        government_purchases = 1
                    elif gov_str in ['–Ω—ñ', '–Ω–µ—Ç', 'no', '0', 'false']:
                        government_purchases = 0
                
                # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤
                tender_count = None
                tender_count_raw = row.get('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤') or row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤') or row.get('Tender Count')
                if tender_count_raw and not pd.isna(tender_count_raw):
                    try:
                        tender_str = str(tender_count_raw).strip().lower()
                        if tender_str not in ['–Ω—ñ', '–Ω–µ—Ç', '–Ω–µ–º–∞—î', '–Ω–µ–º–∞', 'no', 'none', '']:
                            tender_count = int(float(tender_str))
                            if tender_count < 0:
                                tender_count = None
                    except (ValueError, TypeError):
                        tender_count = None
                
                # –Ü–Ω—ñ—Ü—ñ–∞–ª–∏
                initials = clean_text_for_sql(
                    row.get('–ò–Ω–∏—Ü–∏–∞–ª—ã –≤ –ø–∞–¥–µ–∂–µ') or row.get('–Ü–Ω—ñ—Ü—ñ–∞–ª–∏ –≤ –≤—ñ–¥–º—ñ–Ω–∫—É') or
                    row.get('Initials') or row.get('initials') or row.get('–Ü–Ω—ñ—Ü—ñ–∞–ª–∏')
                )
                
                # –î–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è insert
                row_data = [
                    company_id,
                    first_name,
                    middle_name,
                    last_name,
                    work_phone,
                    corporate_site,
                    work_email,
                    company_status,
                    director,
                    government_purchases,
                    tender_count,
                    initials
                ]
                insert_data.append(row_data)
                success_count += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
                if success_count % 100 == 0:
                    print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ {success_count} –∑–∞–ø–∏—Å—ñ–≤...")
                
            except Exception as e:
                print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {index}: {str(e)}")
                error_count += 1
                continue
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ –±–∞—Ç—á–∞–º–∏ –ø–æ 50 –∑–∞–ø–∏—Å—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å bulk –æ–ø–µ—Ä–∞—Ü—ñ—ó)
        print(f"üöÄ –û–±—Ä–æ–±–∫–∞ {len(insert_data)} –∑–∞–ø–∏—Å—ñ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ 50...")
        affected_rows = 0
        batch_size = 50
        
        for i in range(0, len(insert_data), batch_size):
            batch = insert_data[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = (len(insert_data) + batch_size - 1) // batch_size
            
            print(f"üìä –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á—É {batch_num}/{total_batches} ({len(batch)} –∑–∞–ø–∏—Å—ñ–≤)...")
            
            # –û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å –≤ –±–∞—Ç—á—ñ –æ–∫—Ä–µ–º–∏–º UPDATE
            for row_data in batch:
                company_id = row_data[0]
                update_query = """
                    UPDATE companies 
                    SET 
                        first_name = COALESCE(%s, first_name),
                        middle_name = COALESCE(%s, middle_name),
                        last_name = COALESCE(%s, last_name),
                        work_phone = COALESCE(%s, work_phone),
                        corporate_site = COALESCE(%s, corporate_site),
                        work_email = COALESCE(%s, work_email),
                        company_status = COALESCE(%s, company_status),
                        director = COALESCE(%s, director),
                        government_purchases = COALESCE(%s, government_purchases),
                        tender_count = COALESCE(%s, tender_count),
                        initials = COALESCE(%s, initials)
                    WHERE id = %s
                """
                
                update_values = row_data[1:] + [company_id]  # –í—Å—ñ –ø–æ–ª—è + company_id –¥–ª—è WHERE
                cursor.execute(update_query, update_values)
                
                if cursor.rowcount > 0:
                    affected_rows += cursor.rowcount
            
            # –ó–±–µ—Ä–µ–≥—Ç–∏ –±–∞—Ç—á –≤ –±–∞–∑—É
            conn.commit()
            print(f"‚úÖ –ë–∞—Ç—á {batch_num}/{total_batches} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {affected_rows}")
        
        print(f"üéâ –í—Å—ñ –±–∞—Ç—á—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–≥–∞–ª–æ–º –æ–Ω–æ–≤–ª–µ–Ω–æ {affected_rows} –∫–æ–º–ø–∞–Ω—ñ–π")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–π–ª –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏
        result_filename = file_path.replace('.csv', '_actualized.csv')
        with open(result_filename, 'w', newline='', encoding='utf-8') as result_file:
            writer = csv.writer(result_file)
            writer.writerow(['edrpou', 'status', 'updated_fields'])
            
            for index, row in df_existing.iterrows():
                edrpou = str(row[edrpou_col])
                writer.writerow([edrpou, 'updated', 'all_fields'])
        
        print(f"\nüéâ –ê–ö–¢–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {affected_rows} –∫–æ–º–ø–∞–Ω—ñ–π")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {error_count}")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {result_filename}")
        print(f"‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now()}")
        
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"CRITICAL ERROR: {str(e)}")
        return False
    
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python process_actualization.py <csv_file_path>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    if process_actualization_file(file_path):
        print("SUCCESS: Actualization completed successfully")
        sys.exit(0)
    else:
        print("FAILED: Actualization failed")
        sys.exit(1)