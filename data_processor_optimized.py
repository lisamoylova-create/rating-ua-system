import pandas as pd
import logging
import psycopg2
import os
from decimal import Decimal

def get_db_connection():
    """Get direct PostgreSQL connection"""
    return psycopg2.connect(os.environ.get("DATABASE_URL"))

def clean_text_for_sql(value):
    """Clean text value for SQL insertion"""
    if pd.isna(value) or value is None or str(value).lower() == 'nan':
        return None
    
    text = str(value).strip()
    
    # Remove NULL bytes and other problematic characters
    text = text.replace('\x00', '').replace('\r\n', ' ').replace('\n', ' ').replace('\r', ' ')
    text = text.replace('\t', ' ').replace('\\', '/').replace("'", "''")  # Escape single quotes
    
    # Limit length
    if len(text) > 500:
        text = text[:500]
    
    return text if text and text.lower() != 'nan' else None

def process_second_file_optimized(df):
    """–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –≤–µ—Ä—Å—ñ—è process_second_file –∑ batch –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏"""
    success_count = 0
    error_count = 0
    
    logging.info(f"üöÄ OPTIMIZED: Processing actualization file with {len(df)} rows")
    
    # –ó–Ω–∞–π—Ç–∏ –Ñ–î–†–ü–û–£ –∫–æ–ª–æ–Ω–∫—É (–≥–Ω—É—á–∫–∏–π –ø–æ—à—É–∫)
    edrpou_col = None
    for col_name in df.columns:
        if any(keyword in col_name.upper() for keyword in ['–Ñ–î–†–ü–û–£', 'EDRPOU']):
            edrpou_col = col_name
            logging.info(f"Found EDRPOU column: '{col_name}'")
            break
    
    if not edrpou_col:
        logging.error("EDRPOU column not found in actualization file")
        return 0, len(df)
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ñ–î–†–ü–û–£ —Ç–∞ ID –∑ –±–∞–∑–∏ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        logging.info("üìä Loading all companies from database...")
        cursor.execute("SELECT edrpou, id FROM companies")
        db_companies = {row[0]: row[1] for row in cursor.fetchall()}
        logging.info(f"Loaded {len(db_companies)} companies from database")
        
        # –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó - –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
        df[edrpou_col] = df[edrpou_col].astype(str)
        existing_mask = df[edrpou_col].isin(db_companies.keys())
        df_existing = df[existing_mask]
        
        logging.info(f"üéØ Found {len(df_existing)} companies from actualization file that exist in database")
        logging.info(f"Skipping {len(df) - len(df_existing)} companies not found in database")
        
        if len(df_existing) == 0:
            logging.warning("No matching companies found - nothing to actualize")
            return 0, len(df)
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–∂–Ω—É —ñ—Å–Ω—É—é—á—É –∫–æ–º–ø–∞–Ω—ñ—é
        for index, row in df_existing.iterrows():
            try:
                edrpou = str(row[edrpou_col])
                company_id = db_companies[edrpou]
                
                # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                update_fields = []
                update_values = []
                
                # –Ü–º'—è
                first_name = clean_text_for_sql(
                    row.get('–Ü–º\'—è') or row.get('–ò–º—è') or row.get('First Name') or 
                    row.get('first_name') or row.get('–Ü–º\'—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                if first_name:
                    update_fields.append('first_name = %s')
                    update_values.append(first_name)
                
                # –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ
                middle_name = clean_text_for_sql(
                    row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ') or row.get('–û—Ç—á–µ—Å—Ç–≤–æ') or row.get('Middle Name') or
                    row.get('middle_name') or row.get('–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                if middle_name:
                    update_fields.append('middle_name = %s')
                    update_values.append(middle_name)
                
                # –ü—Ä—ñ–∑–≤–∏—â–µ
                last_name = clean_text_for_sql(
                    row.get('–ü—Ä—ñ–∑–≤–∏—â–µ') or row.get('–§–∞–º–∏–ª–∏—è') or row.get('Last Name') or
                    row.get('last_name') or row.get('–ü—Ä—ñ–∑–≤–∏—â–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                if last_name:
                    update_fields.append('last_name = %s')
                    update_values.append(last_name)
                
                # –†–æ–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
                work_phone = clean_text_for_sql(
                    row.get('–†–æ–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω') or row.get('–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω') or 
                    row.get('Work Phone') or row.get('work_phone') or row.get('–¢–µ–ª. —Ä–æ–±')
                )
                if work_phone:
                    update_fields.append('work_phone = %s')
                    update_values.append(work_phone)
                
                # –°–∞–π—Ç
                corporate_site = clean_text_for_sql(
                    row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π —Å–∞–π—Ç') or row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç') or
                    row.get('Corporate Site') or row.get('corporate_site') or row.get('–°–∞–π—Ç')
                )
                if corporate_site:
                    update_fields.append('corporate_site = %s')
                    update_values.append(corporate_site)
                
                # Email
                work_email = clean_text_for_sql(
                    row.get('–†–æ–±–æ—á–∏–π e-mail') or row.get('–†–∞–±–æ—á–∏–π e-mail') or
                    row.get('Work Email') or row.get('work_email') or row.get('Email')
                )
                if work_email:
                    update_fields.append('work_email = %s')
                    update_values.append(work_email)
                
                # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω—ñ—ó
                company_status = clean_text_for_sql(
                    row.get('–°—Ç–∞–Ω –∫–æ–º–ø–∞–Ω—ñ—ó') or row.get('–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏') or
                    row.get('Company Status') or row.get('company_status') or row.get('–°—Ç–∞—Ç—É—Å')
                )
                if company_status:
                    update_fields.append('company_status = %s')
                    update_values.append(company_status)
                
                # –î–∏—Ä–µ–∫—Ç–æ—Ä
                director = clean_text_for_sql(
                    row.get('–î–∏—Ä–µ–∫—Ç–æ—Ä') or row.get('Director') or row.get('director') or
                    row.get('–ö–µ—Ä—ñ–≤–Ω–∏–∫') or row.get('–ü–Ü–ë –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
                )
                if director:
                    update_fields.append('director = %s')
                    update_values.append(director)
                
                # –î–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—ñ (–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ: —Ç–∞–∫=1, –Ω—ñ=0)
                government_purchases_raw = row.get('–£—á–∞—Å—Ç—å —É –¥–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—è—Ö (–Ω–∞ 01.04.2020)') or row.get('–£—á–∞—Å—Ç–∏–µ –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö') or row.get('Government Purchases') or row.get('government_purchases') or row.get('–î–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—ñ')
                if government_purchases_raw and not pd.isna(government_purchases_raw):
                    gov_str = str(government_purchases_raw).strip().lower()
                    if gov_str in ['—Ç–∞–∫', '–¥–∞', 'yes', '1', 'true']:
                        government_purchases = 1
                        update_fields.append('government_purchases = %s')
                        update_values.append(government_purchases)
                    elif gov_str in ['–Ω—ñ', '–Ω–µ—Ç', 'no', '0', 'false']:
                        government_purchases = 0
                        update_fields.append('government_purchases = %s')
                        update_values.append(government_purchases)
                
                # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
                tender_count_raw = row.get('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤') or row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤') or row.get('Tender Count')
                if tender_count_raw and not pd.isna(tender_count_raw):
                    try:
                        tender_str = str(tender_count_raw).strip().lower()
                        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É "–Ω—ñ", "–Ω–µ–º–∞—î", "0"
                        if tender_str not in ['–Ω—ñ', '–Ω–µ—Ç', '–Ω–µ–º–∞—î', '–Ω–µ–º–∞', 'no', 'none', '']:
                            tender_count = int(float(tender_str))
                            if tender_count >= 0:  # –¢—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ —á–∏—Å–ª–∞
                                update_fields.append('tender_count = %s')
                                update_values.append(tender_count)
                    except (ValueError, TypeError):
                        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                        pass
                
                # –Ü–Ω—ñ—Ü—ñ–∞–ª–∏
                initials = clean_text_for_sql(
                    row.get('–ò–Ω–∏—Ü–∏–∞–ª—ã –≤ –ø–∞–¥–µ–∂–µ') or row.get('–Ü–Ω—ñ—Ü—ñ–∞–ª–∏ –≤ –≤—ñ–¥–º—ñ–Ω–∫—É') or
                    row.get('Initials') or row.get('initials') or row.get('–Ü–Ω—ñ—Ü—ñ–∞–ª–∏')
                )
                if initials:
                    update_fields.append('initials = %s')
                    update_values.append(initials)
                
                # –Ø–∫—â–æ —î —â–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏
                if update_fields:
                    update_query = f"UPDATE companies SET {', '.join(update_fields)} WHERE id = %s"
                    update_values.append(company_id)
                    
                    cursor.execute(update_query, update_values)
                    success_count += 1
                    
                    if success_count % 100 == 0:
                        conn.commit()
                        logging.info(f"‚úÖ Processed {success_count} companies")
                else:
                    error_count += 1
                    
            except Exception as e:
                logging.error(f"Error processing row {index}: {str(e)}")
                error_count += 1
                continue
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π commit
        conn.commit()
        logging.info(f"üéâ Actualization complete: {success_count} companies updated, {error_count} errors")
        
    except Exception as e:
        conn.rollback()
        logging.error(f"Database error during actualization: {str(e)}")
        return 0, len(df)
    finally:
        cursor.close()
        conn.close()
    
    return success_count, error_count