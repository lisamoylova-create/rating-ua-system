import os
import logging
from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file, current_app
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
from data_processor_full import process_first_file, process_second_file
# Temporarily disable old data_processor imports
from file_merger import ExcelFileMerger
from models_full import Company, SelectionBase, SelectionCompany, Ranking, RankingCompany
from app import db
import pandas as pd
from sqlalchemy import desc, asc, select, func

main = Blueprint('main', __name__)

ALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–ª–∏—Ç—Ç—è —Ñ–∞–π–ª—ñ–≤
file_merger = ExcelFileMerger()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@main.route('/')
def index():
    if current_user.is_authenticated:
        try:
            # Get basic statistics with safe queries
            total_companies = db.session.execute(db.select(db.func.count(Company.id))).scalar() or 0
            
            # Use simpler count for distinct values
            region_count_query = db.session.execute(
                db.text("SELECT COUNT(DISTINCT region_name) FROM companies WHERE region_name IS NOT NULL")
            ).scalar() or 0
            
            kved_count_query = db.session.execute(
                db.text("SELECT COUNT(DISTINCT kved_code) FROM companies WHERE kved_code IS NOT NULL")
            ).scalar() or 0
            
            # Recent uploads with error handling
            recent_companies = []
            try:
                recent_companies = db.session.execute(
                    db.select(Company).order_by(desc(Company.created_at)).limit(5)
                ).scalars().all()
            except Exception as e:
                logging.error(f"Error getting recent companies: {e}")
            
            stats = {
                'total_companies': total_companies,
                'total_regions': region_count_query,
                'total_kved': kved_count_query,
                'recent_companies': recent_companies
            }
            return render_template('index.html', stats=stats)
        except Exception as e:
            logging.error(f"Error in index route: {e}")
            # Return basic template without stats
            return render_template('index.html', stats={
                'total_companies': 0,
                'total_regions': 0,
                'total_kved': 0,
                'recent_companies': []
            })
    else:
        return redirect(url_for('auth.login'))

@main.route('/upload', methods=['GET', 'POST'])
@login_required
def upload():
    if not current_user.has_permission('upload'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.', 'danger')
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            flash('–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ', 'danger')
            return redirect(request.url)
        
        file = request.files['file']
        merge_file = request.files.get('merge_file')
        
        if file.filename == '':
            flash('–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ', 'danger')
            return redirect(request.url)
        
        if file and allowed_file(file.filename):
            try:
                filename = secure_filename(file.filename or 'unknown.xlsx')
                filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
                file.save(filepath)
                
                # Determine action based on form submission
                action = request.form.get('action', 'upload')
                df = pd.read_excel(filepath)
                
                if action == 'upload':
                    # Process as first file (–æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª)
                    success_count, error_count = process_first_file(df)
                    if success_count > 0:
                        flash(f'‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {success_count} –∫–æ–º–ø–∞–Ω—ñ–π –¥–æ–¥–∞–Ω–æ, {error_count} –ø–æ–º–∏–ª–æ–∫.', 'success')
                        flash(f'üìã –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –∫–æ–º–ø–∞–Ω—ñ–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–ª—è –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó (–ö—Ä–æ–∫ 2).', 'info')
                    else:
                        flash(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {error_count} –ø–æ–º–∏–ª–æ–∫. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É.', 'danger')
                        return redirect(request.url)
                elif action == 'actualize':
                    # Process as second file for actualization
                    success_count, error_count = process_second_file(df)
                    if success_count > 0:
                        flash(f'‚úÖ –ê–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} –∫–æ–º–ø–∞–Ω—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–æ, {error_count} –ø–æ–º–∏–ª–æ–∫.', 'success')
                    else:
                        flash(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó: {error_count} –ø–æ–º–∏–ª–æ–∫. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–ø–∞–Ω—ñ–π.', 'danger')
                        return redirect(request.url)
                
                # Remove merge file processing logic as we now use separate buttons
                
                # Clean up uploaded file
                os.remove(filepath)
                
                return redirect(url_for('main.companies'))
                
            except Exception as e:
                logging.error(f"Error processing file: {str(e)}")
                flash(f'–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {str(e)}', 'danger')
                return redirect(request.url)
        else:
            flash('–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: xlsx, xls, csv', 'danger')
            return redirect(request.url)
    
    return render_template('upload.html')

@main.route('/companies')
@login_required
def companies():
    if not current_user.has_permission('view'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–ø–∞–Ω—ñ–π.', 'danger')
        return redirect(url_for('main.index'))
    
    page = request.args.get('page', 1, type=int)
    per_page = 50
    
    # Build query with optional filters
    query = db.select(Company)
    
    # Filter by region name
    region_name = request.args.get('region_name', type=str)
    if region_name:
        query = query.where(Company.region_name == region_name)
    
    # Filter by KVED code
    kved_code = request.args.get('kved_code', type=str)
    if kved_code:
        query = query.where(Company.kved_code == kved_code)
    
    # Sorting
    sort_by = request.args.get('sort_by', 'name')
    sort_order = request.args.get('sort_order', 'asc')
    
    if sort_by == 'revenue':
        query = query.order_by(desc(Company.revenue_2019) if sort_order == 'desc' else asc(Company.revenue_2019))
    elif sort_by == 'profit':
        query = query.order_by(desc(Company.profit_2019) if sort_order == 'desc' else asc(Company.profit_2019))
    elif sort_by == 'personnel':
        query = query.order_by(desc(Company.personnel_2019) if sort_order == 'desc' else asc(Company.personnel_2019))
    elif sort_by == 'ranking':
        query = query.order_by(asc(Company.ranking) if sort_order == 'asc' else desc(Company.ranking))
    else:
        query = query.order_by(asc(Company.name) if sort_order == 'asc' else desc(Company.name))
    
    # Get companies for pagination manually
    companies = db.session.execute(query).scalars().all()
    
    # Get unique values for filters (filter out None values)
    regions = db.session.execute(
        db.select(Company.region_name).distinct().where(Company.region_name.isnot(None))
    ).scalars().all()
    kveds = db.session.execute(
        db.select(Company.kved_code).distinct().where(Company.kved_code.isnot(None))
    ).scalars().all()
    sizes = db.session.execute(
        db.select(Company.company_size_name).distinct().where(Company.company_size_name.isnot(None))
    ).scalars().all()
    
    return render_template('companies.html', 
                         companies=companies,
                         regions=regions, 
                         kveds=kveds, 
                         sizes=sizes,
                         current_filters={
                             'region_name': region_name,
                             'kved_code': kved_code,
                             'sort_by': sort_by,
                             'sort_order': sort_order
                         })

@main.route('/filter', methods=['GET', 'POST'])
@login_required
def filter_companies_route():
    if not current_user.has_permission('edit'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π.', 'danger')
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        # Step 1: Primary filters
        min_employees = request.form.get('min_employees', type=int, default=0)
        min_revenue = request.form.get('min_revenue', type=int, default=0)
        min_profit_str = request.form.get('min_profit', '').strip()
        min_profit = float(min_profit_str) if min_profit_str else None
        
        # Step 2: Secondary filters
        region_filter = request.form.getlist('region_filter')
        kved_filter = request.form.getlist('kved_filter')
        size_filter = request.form.getlist('size_filter')
        
        # Convert to integers if values exist
        region_ids = [int(r) for r in region_filter if r] if region_filter else None
        kved_ids = [int(k) for k in kved_filter if k] if kved_filter else None
        size_ids = [int(s) for s in size_filter if s] if size_filter else None
        
        # Step 3: Sorting criteria and metadata
        sort_criteria = request.form.get('sort_criteria', 'revenue')
        apply_regional_filter = request.form.get('apply_regional_filter') == 'on'
        year_source = request.form.get('year_source', '2025')
        ranking_name = request.form.get('ranking_name', '')
        
        try:
            # Temporarily disable filtering functionality - will implement later
            flash('–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.', 'warning')
            return redirect(url_for('main.companies'))
            
            # Build detailed message about applied filters
            filter_details = []
            if min_employees > 0:
                filter_details.append(f"–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ ‚â• {min_employees}")
            if min_revenue > 0:
                filter_details.append(f"–¥–æ—Ö—ñ–¥ ‚â• {min_revenue:,.0f} –≥—Ä–Ω")
            if min_profit is not None:
                filter_details.append(f"–ø—Ä–∏–±—É—Ç–æ–∫ ‚â• {min_profit:,.0f} –≥—Ä–Ω")
            if region_ids:
                filter_details.append(f"{len(region_ids)} —Ä–µ–≥—ñ–æ–Ω(—ñ–≤)")
            if kved_ids:
                filter_details.append(f"{len(kved_ids)} –ö–í–ï–î –∫–æ–¥(—ñ–≤)")
            if size_ids:
                filter_details.append(f"{len(size_ids)} —Ä–æ–∑–º—ñ—Ä(—ñ–≤)")
            
            filter_summary = ", ".join(filter_details) if filter_details else "–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å"
            
            flash(f'–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({filter_summary}). {filtered_count} –∫–æ–º–ø–∞–Ω—ñ–π —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º "{sort_criteria}".', 'success')
            return redirect(url_for('main.companies', sort_by='ranking', sort_order='asc'))
            
        except Exception as e:
            logging.error(f"Error filtering companies: {str(e)}")
            flash(f'–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}', 'danger')
    
    # Load filter options for GET request - using simplified structure
    regions = db.session.execute(
        db.select(Company.region_name).distinct().where(Company.region_name.isnot(None))
    ).scalars().all()
    kveds = db.session.execute(
        db.select(Company.kved_code).distinct().where(Company.kved_code.isnot(None))
    ).scalars().all()
    sizes = db.session.execute(
        db.select(Company.company_size_name).distinct().where(Company.company_size_name.isnot(None))
    ).scalars().all()
    
    return render_template('filter.html', regions=regions, kveds=kveds, sizes=sizes)

@main.route('/export')
@login_required
def export():
    if not current_user.has_permission('view'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö.', 'danger')
        return redirect(url_for('main.index'))
    
    try:
        # Get filtered companies (those with ranking)
        companies = Company.query.filter(Company.ranking.isnot(None)).order_by(Company.ranking).all()
        
        if not companies:
            flash('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–≤–µ–¥—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é.', 'warning')
            return redirect(url_for('main.companies'))
        
        export_path = export_to_csv(companies)
        
        return send_file(export_path, 
                        as_attachment=True, 
                        download_name='filtered_companies.csv',
                        mimetype='text/csv')
        
    except Exception as e:
        logging.error(f"Error exporting data: {str(e)}")
        flash(f'–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {str(e)}', 'danger')
        return redirect(url_for('main.companies'))

@main.route('/selection_for_ranking', methods=['GET', 'POST'])
@login_required
def selection_for_ranking():
    if not current_user.has_permission('edit'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–ª—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è.', 'danger')
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        min_employees = request.form.get('min_employees', type=int, default=0)
        min_revenue = request.form.get('min_revenue', type=int, default=0)
        min_profit_str = request.form.get('min_profit', '').strip()
        min_profit = float(min_profit_str) if min_profit_str else None
        
        try:
            # Get companies that meet criteria
            query = db.session.query(Company).join(Financial)
            
            if min_employees > 0:
                query = query.filter(Company.personnel_2019 >= min_employees)
            if min_revenue > 0:
                query = query.filter(Financial.revenue >= min_revenue)
            if min_profit is not None:
                query = query.filter(Financial.profit >= min_profit)
            
            companies = query.all()
            
            # Create new selection base
            # Deactivate previous selection bases
            SelectionBase.query.update({SelectionBase.is_active: False})
            
            # Create new selection base
            selection_base = SelectionBase()
            selection_base.name = f'–ë–∞–∑–∞ –¥–ª—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è ({len(companies)} –∫–æ–º–ø–∞–Ω—ñ–π)'
            selection_base.min_employees = min_employees
            selection_base.min_revenue = min_revenue
            selection_base.min_profit = min_profit
            selection_base.companies_count = len(companies)
            selection_base.is_active = True
            db.session.add(selection_base)
            db.session.flush()
            
            # Add companies to selection base
            for company in companies:
                selection_company = SelectionCompany()
                selection_company.selection_base_id = selection_base.id
                selection_company.company_id = company.id
                db.session.add(selection_company)
            
            db.session.commit()
            
            flash(f'–ë–∞–∑–∞ –¥–ª—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–∞. –í—ñ–¥—ñ–±—Ä–∞–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω—ñ–π –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏: –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ ‚â• {min_employees}, –¥–æ—Ö—ñ–¥ ‚â• {min_revenue:,.0f} –≥—Ä–Ω{f", –ø—Ä–∏–±—É—Ç–æ–∫ ‚â• {min_profit:,.0f} –≥—Ä–Ω" if min_profit else ""}.', 'success')
            
        except Exception as e:
            db.session.rollback()
            logging.error(f"Error creating selection base: {str(e)}")
            flash(f'–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏: {str(e)}', 'danger')
    
    return render_template('selection_for_ranking.html')

@main.route('/ranking', methods=['GET', 'POST'])
@login_required
def ranking():
    if not current_user.has_permission('edit'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É.', 'danger')
        return redirect(url_for('main.index'))
    
    if request.method == 'POST':
        # Get active selection base
        selection_base = SelectionBase.query.filter_by(is_active=True).first()
        if not selection_base:
            flash('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–ª—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è.', 'warning')
            return redirect(url_for('main.selection_for_ranking'))
        
        # Get form data
        kved_filter = request.form.getlist('kved_filter')
        region_filter = request.form.getlist('region_filter')
        size_filter = request.form.getlist('size_filter')
        sort_criteria = request.form.get('sort_criteria', 'revenue')
        ranking_name = request.form.get('ranking_name', f'–†–µ–π—Ç–∏–Ω–≥ –∑–∞ {sort_criteria}')
        
        try:
            # Get companies from selection base
            companies_query = db.session.query(Company).join(SelectionCompany).filter(
                SelectionCompany.selection_base_id == selection_base.id
            ).join(Financial)
            
            # Apply filters
            if kved_filter:
                kved_ids = [int(k) for k in kved_filter if k]
                companies_query = companies_query.filter(Company.kved_id.in_(kved_ids))
            
            if region_filter:
                region_ids = [int(r) for r in region_filter if r]
                companies_query = companies_query.filter(Company.region_id.in_(region_ids))
            
            if size_filter:
                size_ids = [int(s) for s in size_filter if s]
                companies_query = companies_query.filter(Company.company_size_id.in_(size_ids))
            
            companies = companies_query.all()
            
            if not companies:
                flash('–ñ–æ–¥–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–±—Ä–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º.', 'warning')
                return render_template('ranking.html')
            
            # Sort companies
            if sort_criteria == 'revenue':
                companies.sort(key=lambda c: (c.financials[0].revenue if c.financials and len(c.financials) > 0 else 0) or 0, reverse=True)
            elif sort_criteria == 'profit':
                companies.sort(key=lambda c: (c.financials[0].profit if c.financials and len(c.financials) > 0 else 0) or 0, reverse=True)
            elif sort_criteria == 'personnel':
                companies.sort(key=lambda c: (c.personnel_2019 or 0), reverse=True)
            
            # Create ranking
            ranking = Ranking()
            ranking.name = ranking_name
            ranking.selection_base_id = selection_base.id
            ranking.sort_criteria = sort_criteria
            ranking.region_filters = ','.join(region_filter) if region_filter else None
            ranking.kved_filters = ','.join(kved_filter) if kved_filter else None
            ranking.size_filters = ','.join(size_filter) if size_filter else None
            ranking.companies_count = len(companies)
            db.session.add(ranking)
            db.session.flush()
            
            # Add companies to ranking
            for position, company in enumerate(companies, 1):
                if sort_criteria == 'revenue':
                    sort_value = (company.financials[0].revenue if company.financials and len(company.financials) > 0 else 0) or 0
                elif sort_criteria == 'profit':
                    sort_value = (company.financials[0].profit if company.financials and len(company.financials) > 0 else 0) or 0
                else:  # personnel
                    sort_value = company.personnel_2019 or 0
                
                ranking_company = RankingCompany()
                ranking_company.ranking_id = ranking.id
                ranking_company.company_id = company.id
                ranking_company.rank_position = position
                ranking_company.sort_value = sort_value
                db.session.add(ranking_company)
            
            db.session.commit()
            
            flash(f'–†–µ–π—Ç–∏–Ω–≥ "{ranking_name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ {len(companies)} –∫–æ–º–ø–∞–Ω—ñ—è–º–∏.', 'success')
            
            # Pass ranking data to template for immediate display
            ranking_data = {
                'id': ranking.id,
                'name': ranking.name,
                'sort_criteria': ranking.sort_criteria,
                'companies_count': len(companies),
                'created_at': ranking.created_at.isoformat()
            }
            
            companies_data = []
            for position, company in enumerate(companies, 1):
                if sort_criteria == 'revenue':
                    sort_value = (company.financials[0].revenue if company.financials and len(company.financials) > 0 else 0) or 0
                elif sort_criteria == 'profit':
                    sort_value = (company.financials[0].profit if company.financials and len(company.financials) > 0 else 0) or 0
                else:  # personnel
                    sort_value = company.personnel_2019 or 0
                
                company_data = {
                    'rank_position': position,
                    'sort_value': float(sort_value),
                    'company': {
                        'id': company.id,
                        'edrpou': company.edrpou,
                        'name': company.name,
                        'address': company.address,
                        'phone': company.phone,
                        'personnel_2019': company.personnel_2019,
                        'region': {
                            'id': company.region.id,
                            'name': company.region.name
                        } if company.region else None,
                        'kved': {
                            'id': company.kved.id,
                            'code': company.kved.code,
                            'description': company.kved.description
                        } if company.kved else None,
                        'financial': {
                            'revenue': float(company.financials[0].revenue) if company.financials and len(company.financials) > 0 and company.financials[0].revenue else None,
                            'profit': float(company.financials[0].profit) if company.financials and len(company.financials) > 0 and company.financials[0].profit else None
                        } if company.financials and len(company.financials) > 0 else None
                    }
                }
                companies_data.append(company_data)
            
            return render_template('ranking.html', ranking_created=ranking_data, ranking_companies=companies_data)
            
        except Exception as e:
            db.session.rollback()
            logging.error(f"Error creating ranking: {str(e)}")
            flash(f'–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {str(e)}', 'danger')
    
    return render_template('ranking.html')

@main.route('/export_csv')
@login_required
def export_csv():
    if not current_user.has_permission('view'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö.', 'danger')
        return redirect(url_for('main.index'))
    
    try:
        # Get latest ranking
        ranking = Ranking.query.order_by(desc(Ranking.created_at)).first()
        if not ranking:
            flash('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.', 'warning')
            return redirect(url_for('main.ranking'))
        
        # Get ranking companies
        ranking_companies = db.session.query(RankingCompany, Company, Financial).join(
            Company, RankingCompany.company_id == Company.id
        ).outerjoin(
            Financial, Company.id == Financial.company_id
        ).filter(
            RankingCompany.ranking_id == ranking.id
        ).order_by(RankingCompany.rank_position).all()
        
        data = []
        for rank_company, company, financial in ranking_companies:
            row = {
                '–†–µ–π—Ç–∏–Ω–≥': rank_company.rank_position,
                '–Ñ–î–†–ü–û–£': company.edrpou,
                '–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó': company.name,
                '–ö–í–ï–î': company.kved.code if company.kved else '',
                '–í–∏–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ': company.kved.description if company.kved else '',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª (2019)': company.personnel_2019,
                '–û–±–ª–∞—Å—Ç—å': company.region.name if company.region else '',
                '–¢–µ–ª–µ—Ñ–æ–Ω': company.phone,
                '–ê–¥—Ä–µ—Å–∞': company.address,
                '–î–æ—Ö—ñ–¥': financial.revenue if financial else '',
                '–ü—Ä–∏–±—É—Ç–æ–∫': financial.profit if financial else '',
                '–†–æ–∑–º—ñ—Ä –∫–æ–º–ø–∞–Ω—ñ—ó': company.company_size.size_name if company.company_size else '',
                '–ò—Å—Ç–æ—á–Ω–∏–∫': company.source or '',
                '–¢–û–ü': company.top_count or '',
                '–ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Ç—å': company.total_count or '',
                '–ê–∫—Ç—É–∞–ª—ñ–∑–æ–≤–∞–Ω–æ': company.actualized or ''
            }
            data.append(row)
        
        df = pd.DataFrame(data)
        export_path = f'ranking_{ranking.id}_export.csv'
        df.to_csv(export_path, index=False, encoding='utf-8')
        
        return send_file(export_path, 
                        as_attachment=True, 
                        download_name=f'{ranking.name}_ranking.csv',
                        mimetype='text/csv')
        
    except Exception as e:
        logging.error(f"Error exporting ranking: {str(e)}")
        flash(f'–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {str(e)}', 'danger')
        return redirect(url_for('main.ranking'))

@main.route('/export_pdf')
@login_required
def export_pdf():
    if not current_user.has_permission('view'):
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö.', 'danger')
        return redirect(url_for('main.index'))
    
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_CENTER, TA_LEFT
        from io import BytesIO
        import os
        
        # Get latest ranking
        ranking = Ranking.query.order_by(desc(Ranking.created_at)).first()
        if not ranking:
            flash('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.', 'warning')
            return redirect(url_for('main.ranking'))
        
        # Get ranking companies
        ranking_companies = db.session.query(RankingCompany, Company, Region, Kved, Financial).join(
            Company, RankingCompany.company_id == Company.id
        ).outerjoin(
            Region, Company.region_id == Region.id
        ).outerjoin(
            Kved, Company.kved_id == Kved.id
        ).outerjoin(
            Financial, Company.id == Financial.company_id
        ).filter(
            RankingCompany.ranking_id == ranking.id
        ).order_by(RankingCompany.rank_position).all()
        
        # Create PDF in memory
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=1*inch)
        
        # Container for the 'Flowable' objects
        elements = []
        
        # Get styles
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.gray
        )
        
        # Title with company logo placeholder
        title = Paragraph(f"<b>–†–ï–ô–¢–ò–ù–ì –ö–û–ú–ü–ê–ù–Ü–ô –£–ö–†–ê–á–ù–ò</b>", title_style)
        elements.append(title)
        
        subtitle = Paragraph(f"{ranking.name}<br/>–°—Ç–≤–æ—Ä–µ–Ω–æ: {ranking.created_at.strftime('%d.%m.%Y')}", subtitle_style)
        elements.append(subtitle)
        
        elements.append(Spacer(1, 0.5*inch))
        
        # Prepare table data
        table_data = [['–†–µ–π—Ç–∏–Ω–≥', '–ö–æ–¥ –Ñ–î–†–ü–û–£', '–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó']]
        
        for rank_company, company, region, kved, financial in ranking_companies:
            table_data.append([
                str(rank_company.rank_position),
                company.edrpou or '',
                company.name or ''
            ])
        
        # Create table
        table = Table(table_data, colWidths=[1*inch, 1.5*inch, 4*inch])
        
        # Table style
        table.setStyle(TableStyle([
            # Header row
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            
            # Body rows
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 1), (0, -1), 'CENTER'),  # Ranking column center
            ('ALIGN', (1, 1), (1, -1), 'CENTER'),  # EDRPOU column center
            ('ALIGN', (2, 1), (2, -1), 'LEFT'),    # Company name left
            
            # Grid
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # Alternate row colors
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
        ]))
        
        elements.append(table)
        
        # Footer
        elements.append(Spacer(1, 0.5*inch))
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=10,
            alignment=TA_CENTER,
            textColor=colors.gray
        )
        
        criteria_parts = []
        if ranking.kved_filters:
            criteria_parts.append("–ö–í–ï–î")
        if ranking.region_filters:
            criteria_parts.append("–†–µ–≥—ñ–æ–Ω") 
        if ranking.size_filters:
            criteria_parts.append("–†–æ–∑–º—ñ—Ä")
        criteria_text = f"–ö—Ä–∏—Ç–µ—Ä—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {', '.join(criteria_parts)}" if criteria_parts else "–ë–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"
        
        footer = Paragraph(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–∞–Ω—ñ–π: {len(ranking_companies)}<br/>{criteria_text}<br/>–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {ranking.sort_criteria}", footer_style)
        elements.append(footer)
        
        # Build PDF
        doc.build(elements)
        
        # Get PDF data
        pdf_data = buffer.getvalue()
        buffer.close()
        
        # Create response
        from flask import Response
        import urllib.parse
        
        # Safely encode filename for HTTP header
        safe_filename = f"ranking_{ranking.id}.pdf"
        encoded_filename = urllib.parse.quote(ranking.name.encode('utf-8')) if ranking.name else "rating"
        
        response = Response(pdf_data, content_type='application/pdf')
        response.headers['Content-Disposition'] = f'attachment; filename="{safe_filename}"; filename*=UTF-8\'\'{encoded_filename}.pdf'
        
        return response
        
    except ImportError as e:
        logging.error(f"Missing PDF library: {str(e)}")
        flash('–ü–æ–º–∏–ª–∫–∞: –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', 'danger')
        return redirect(url_for('main.ranking'))
    except Exception as e:
        logging.error(f"Error creating PDF: {str(e)}")
        flash(f'–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF: {str(e)}', 'danger')
        return redirect(url_for('main.ranking'))




